// <auto-generated />
using System;
using FitnessWeb.Database.Sqlite;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FitnessWeb.Database.Sqlite.Migrations
{
    [DbContext(typeof(FitnessSqliteContext))]
    [Migration("20230104134114_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.1");

            modelBuilder.Entity("Core.Entities.Equipment.Base.Equipment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Equipment");

                    b.HasDiscriminator<int>("Type");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Core.Entities.Exercises.Exercise", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Exercise");
                });

            modelBuilder.Entity("Core.Entities.Muscle.Muscle", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Muscle");
                });

            modelBuilder.Entity("Core.Entities.Muscle.MuscleGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("MuscleGroup");
                });

            modelBuilder.Entity("EquipmentExercise", b =>
                {
                    b.Property<Guid>("RequiredEquipmentId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("SuitableExercisesId")
                        .HasColumnType("TEXT");

                    b.HasKey("RequiredEquipmentId", "SuitableExercisesId");

                    b.HasIndex("SuitableExercisesId");

                    b.ToTable("EquipmentExercise");
                });

            modelBuilder.Entity("ExerciseMuscle", b =>
                {
                    b.Property<Guid>("MuscleExercisesId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("TrainedMusclesId")
                        .HasColumnType("TEXT");

                    b.HasKey("MuscleExercisesId", "TrainedMusclesId");

                    b.HasIndex("TrainedMusclesId");

                    b.ToTable("ExerciseMuscle");
                });

            modelBuilder.Entity("MuscleMuscleGroup", b =>
                {
                    b.Property<Guid>("MuscleGroupsId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("MusclesId")
                        .HasColumnType("TEXT");

                    b.HasKey("MuscleGroupsId", "MusclesId");

                    b.HasIndex("MusclesId");

                    b.ToTable("MuscleMuscleGroup");
                });

            modelBuilder.Entity("Core.Entities.Equipment.Accessory", b =>
                {
                    b.HasBaseType("Core.Entities.Equipment.Base.Equipment");

                    b.HasDiscriminator().HasValue(5);
                });

            modelBuilder.Entity("Core.Entities.Equipment.Bar", b =>
                {
                    b.HasBaseType("Core.Entities.Equipment.Base.Equipment");

                    b.Property<double>("DiameterMm")
                        .HasColumnType("REAL");

                    b.Property<double>("LengthCm")
                        .HasColumnType("REAL");

                    b.HasDiscriminator().HasValue(3);
                });

            modelBuilder.Entity("Core.Entities.Equipment.ExerciseMachine", b =>
                {
                    b.HasBaseType("Core.Entities.Equipment.Base.Equipment");

                    b.HasDiscriminator().HasValue(4);
                });

            modelBuilder.Entity("Core.Entities.Equipment.FreeWeight", b =>
                {
                    b.HasBaseType("Core.Entities.Equipment.Base.Equipment");

                    b.Property<double>("MassKg")
                        .HasColumnType("REAL");

                    b.HasDiscriminator().HasValue(1);
                });

            modelBuilder.Entity("Core.Entities.Equipment.WeightDisc", b =>
                {
                    b.HasBaseType("Core.Entities.Equipment.Base.Equipment");

                    b.Property<double>("DiameterMm")
                        .HasColumnType("REAL");

                    b.Property<double>("MassKg")
                        .HasColumnType("REAL");

                    // b.ToTable(t =>
                    //     {
                    //         t.Property("DiameterMm")
                    //             .HasColumnName("WeightDisc_DiameterMm");

                    //         t.Property("MassKg")
                    //             .HasColumnName("WeightDisc_MassKg");
                    //     });

                    b.HasDiscriminator().HasValue(2);
                });

            modelBuilder.Entity("EquipmentExercise", b =>
                {
                    b.HasOne("Core.Entities.Equipment.Base.Equipment", null)
                        .WithMany()
                        .HasForeignKey("RequiredEquipmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Exercises.Exercise", null)
                        .WithMany()
                        .HasForeignKey("SuitableExercisesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ExerciseMuscle", b =>
                {
                    b.HasOne("Core.Entities.Exercises.Exercise", null)
                        .WithMany()
                        .HasForeignKey("MuscleExercisesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Muscle.Muscle", null)
                        .WithMany()
                        .HasForeignKey("TrainedMusclesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MuscleMuscleGroup", b =>
                {
                    b.HasOne("Core.Entities.Muscle.MuscleGroup", null)
                        .WithMany()
                        .HasForeignKey("MuscleGroupsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Muscle.Muscle", null)
                        .WithMany()
                        .HasForeignKey("MusclesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
