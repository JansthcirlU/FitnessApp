// <auto-generated />
using System;
using FitnessWeb.Database.Sqlite;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FitnessWeb.Database.Sqlite.Migrations
{
    [DbContext(typeof(FitnessSqliteContext))]
    partial class FitnessSqliteContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "6.0.0");

            modelBuilder.Entity("Core.Entities.Equipment.Base.Equipment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Equipment");

                    b.HasDiscriminator<int>("Type");
                });

            modelBuilder.Entity("Core.Entities.Exercises.Exercise", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Exercise");
                });

            modelBuilder.Entity("Core.Entities.Exercises.ExerciseRoutine", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ExerciseId")
                        .HasColumnType("TEXT");

                    b.Property<int>("Repetitions")
                        .HasColumnType("INTEGER");

                    b.Property<TimeSpan>("RestTime")
                        .HasColumnType("TEXT");

                    b.Property<int>("Sets")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ExerciseId");

                    b.ToTable("ExerciseRoutine");
                });

            modelBuilder.Entity("Core.Entities.Exercises.WorkoutPlan", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("WorkoutPlan");
                });

            modelBuilder.Entity("Core.Entities.Exercises.WorkoutPlanStep", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<int>("Step")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("StepPlanId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("StepRoutineId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("StepPlanId");

                    b.HasIndex("StepRoutineId");

                    b.ToTable("WorkoutPlanStep");
                });

            modelBuilder.Entity("Core.Entities.Muscle.Muscle", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Muscle");
                });

            modelBuilder.Entity("Core.Entities.Muscle.MuscleGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("MuscleGroup");
                });

            modelBuilder.Entity("Core.Entities.Users.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("User");
                });

            modelBuilder.Entity("EquipmentExercise", b =>
                {
                    b.Property<Guid>("RequiredEquipmentId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("SuitableExercisesId")
                        .HasColumnType("TEXT");

                    b.HasKey("RequiredEquipmentId", "SuitableExercisesId");

                    b.HasIndex("SuitableExercisesId");

                    b.ToTable("EquipmentExercise");
                });

            modelBuilder.Entity("EquipmentUser", b =>
                {
                    b.Property<Guid>("EquipmentId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("OwnersId")
                        .HasColumnType("TEXT");

                    b.HasKey("EquipmentId", "OwnersId");

                    b.HasIndex("OwnersId");

                    b.ToTable("EquipmentUser");
                });

            modelBuilder.Entity("ExerciseMuscle", b =>
                {
                    b.Property<Guid>("MuscleExercisesId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("TrainedMusclesId")
                        .HasColumnType("TEXT");

                    b.HasKey("MuscleExercisesId", "TrainedMusclesId");

                    b.HasIndex("TrainedMusclesId");

                    b.ToTable("ExerciseMuscle");
                });

            modelBuilder.Entity("MuscleMuscleGroup", b =>
                {
                    b.Property<Guid>("MuscleGroupsId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("MusclesId")
                        .HasColumnType("TEXT");

                    b.HasKey("MuscleGroupsId", "MusclesId");

                    b.HasIndex("MusclesId");

                    b.ToTable("MuscleMuscleGroup");
                });

            modelBuilder.Entity("Core.Entities.Equipment.Accessory", b =>
                {
                    b.HasBaseType("Core.Entities.Equipment.Base.Equipment");

                    b.HasDiscriminator().HasValue(5);
                });

            modelBuilder.Entity("Core.Entities.Equipment.Bar", b =>
                {
                    b.HasBaseType("Core.Entities.Equipment.Base.Equipment");

                    b.Property<double>("DiameterMm")
                        .HasColumnType("REAL");

                    b.Property<double>("LengthCm")
                        .HasColumnType("REAL");

                    b.HasDiscriminator().HasValue(3);
                });

            modelBuilder.Entity("Core.Entities.Equipment.ExerciseMachine", b =>
                {
                    b.HasBaseType("Core.Entities.Equipment.Base.Equipment");

                    b.HasDiscriminator().HasValue(4);
                });

            modelBuilder.Entity("Core.Entities.Equipment.FreeWeight", b =>
                {
                    b.HasBaseType("Core.Entities.Equipment.Base.Equipment");

                    b.Property<double>("MassKg")
                        .HasColumnType("REAL");

                    b.HasDiscriminator().HasValue(1);
                });

            modelBuilder.Entity("Core.Entities.Equipment.WeightDisc", b =>
                {
                    b.HasBaseType("Core.Entities.Equipment.Base.Equipment");

                    b.Property<double>("DiameterMm")
                        .HasColumnType("REAL")
                        .HasColumnName("WeightDisc_DiameterMm");

                    b.Property<double>("MassKg")
                        .HasColumnType("REAL")
                        .HasColumnName("WeightDisc_MassKg");

                    b.HasDiscriminator().HasValue(2);
                });

            modelBuilder.Entity("Core.Entities.Exercises.ExerciseRoutine", b =>
                {
                    b.HasOne("Core.Entities.Exercises.Exercise", "Exercise")
                        .WithMany("ExerciseRoutines")
                        .HasForeignKey("ExerciseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Exercise");
                });

            modelBuilder.Entity("Core.Entities.Exercises.WorkoutPlan", b =>
                {
                    b.HasOne("Core.Entities.Users.User", "User")
                        .WithMany("Plans")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Core.Entities.Exercises.WorkoutPlanStep", b =>
                {
                    b.HasOne("Core.Entities.Exercises.WorkoutPlan", "StepPlan")
                        .WithMany("Steps")
                        .HasForeignKey("StepPlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Exercises.ExerciseRoutine", "StepRoutine")
                        .WithMany("RoutineSteps")
                        .HasForeignKey("StepRoutineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StepPlan");

                    b.Navigation("StepRoutine");
                });

            modelBuilder.Entity("EquipmentExercise", b =>
                {
                    b.HasOne("Core.Entities.Equipment.Base.Equipment", null)
                        .WithMany()
                        .HasForeignKey("RequiredEquipmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Exercises.Exercise", null)
                        .WithMany()
                        .HasForeignKey("SuitableExercisesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EquipmentUser", b =>
                {
                    b.HasOne("Core.Entities.Equipment.Base.Equipment", null)
                        .WithMany()
                        .HasForeignKey("EquipmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Users.User", null)
                        .WithMany()
                        .HasForeignKey("OwnersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ExerciseMuscle", b =>
                {
                    b.HasOne("Core.Entities.Exercises.Exercise", null)
                        .WithMany()
                        .HasForeignKey("MuscleExercisesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Muscle.Muscle", null)
                        .WithMany()
                        .HasForeignKey("TrainedMusclesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MuscleMuscleGroup", b =>
                {
                    b.HasOne("Core.Entities.Muscle.MuscleGroup", null)
                        .WithMany()
                        .HasForeignKey("MuscleGroupsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Muscle.Muscle", null)
                        .WithMany()
                        .HasForeignKey("MusclesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Entities.Exercises.Exercise", b =>
                {
                    b.Navigation("ExerciseRoutines");
                });

            modelBuilder.Entity("Core.Entities.Exercises.ExerciseRoutine", b =>
                {
                    b.Navigation("RoutineSteps");
                });

            modelBuilder.Entity("Core.Entities.Exercises.WorkoutPlan", b =>
                {
                    b.Navigation("Steps");
                });

            modelBuilder.Entity("Core.Entities.Users.User", b =>
                {
                    b.Navigation("Plans");
                });
#pragma warning restore 612, 618
        }
    }
}
